#!/usr/bin/env python3

"""
DNS Propagation Checker with Public DNS Resolvers and Threading
---------------------------------------------------------------
Purpose:
    This script checks DNS propagation for specified domains by querying multiple public DNS resolvers.
    It queries each resolver for specific DNS record types using threading for improved performance.

Usage:
    python dns_propagation_checker.py <domain1> [domain2 ... domainN]

Example:
    python dns_propagation_checker.py example.com example.net
"""

import sys
from dataclasses import dataclass
from typing import List
from concurrent.futures import ThreadPoolExecutor, as_completed
import dns.resolver

# ANSI color codes for formatting output
RESET = "\033[0m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
ORANGE = "\033[38;5;208m"
CYAN = "\033[96m"
RED = "\033[91m"

# Public DNS servers for querying
PUBLIC_DNS_SERVERS = [
    "8.8.8.8",  # Google Public DNS
    "1.1.1.1",  # Cloudflare DNS
    "9.9.9.9",  # Quad9
    "208.67.222.222",  # OpenDNS
    "185.228.168.168",  # CleanBrowsing Security
    "94.140.14.14",  # AdGuard DNS
    "76.76.2.0",  # Control D DNS
    "64.6.64.6",  # Verisign Public DNS
    "198.41.0.4",  # Root DNS servers from: curl https://www.internic.net/domain/named.root | grep "A    " | awk '{print $4}'
    "170.247.170.2",
    "192.33.4.12",
    "199.7.91.13",
    "192.203.230.10",
    "192.5.5.241",
    "192.112.36.4",
    "198.97.190.53",
    "192.36.148.17",
    "192.58.128.30",
    "193.0.14.129",
    "199.7.83.42",
    "202.12.27.33",
]

RECORD_TYPES = ["A", "NS", "CNAME"]


@dataclass
class DNSQueryResult:
    """Stores DNS query results for easy access and formatting."""

    domain: str
    dns_server: str
    record_type: str
    status: str
    output: str


def dns_query(domain: str, dns_server: str, record_type: str) -> DNSQueryResult:
    """
    Perform a DNS query for a specific record type using dnspython.
    """
    resolver = dns.resolver.Resolver()
    resolver.nameservers = [dns_server]
    resolver.timeout = 3
    resolver.lifetime = 5

    try:
        answers = resolver.resolve(domain, record_type)
        output = "\n".join(str(answer) for answer in answers)
        print(
            f"{GREEN}SUCCESS{RESET}: {domain:<25} | {dns_server:<15} | {record_type:<10}"
        )
        return DNSQueryResult(domain, dns_server, record_type, "Success", output)
    except dns.resolver.NoAnswer:
        print(
            f"{YELLOW}WARNING{RESET}: {domain:<25} | {dns_server:<15} | {record_type:<10} | No answer found"
        )
        return DNSQueryResult(domain, dns_server, record_type, "Failure", "No answer")
    except dns.resolver.NXDOMAIN:
        print(
            f"{RED}ERROR{RESET}: {domain:<25} | {dns_server:<15} | {record_type:<10} | Domain does not exist"
        )
        return DNSQueryResult(domain, dns_server, record_type, "Failure", "NXDOMAIN")
    except dns.resolver.Timeout:
        print(
            f"{RED}ERROR{RESET}: {domain:<25} | {dns_server:<15} | {record_type:<10} | Query timed out"
        )
        return DNSQueryResult(domain, dns_server, record_type, "Failure", "Timeout")
    except dns.exception.DNSException as e:
        short_error = str(e).split(":")[-1].strip()
        print(
            f"{RED}ERROR{RESET}: {domain:<25} | {dns_server:<15} | {record_type:<10} | {short_error}"
        )
        return DNSQueryResult(domain, dns_server, record_type, "Failure", short_error)


def run_dns_queries(
    domains: List[str], dns_servers: List[str], max_workers: int = 10
) -> List[DNSQueryResult]:
    """
    Run DNS queries concurrently for each domain against each DNS server and record type.
    """
    results = []
    total_queries = len(domains) * len(dns_servers) * len(RECORD_TYPES)
    completed_queries = 0

    print(
        f"{CYAN}Starting DNS propagation checks for {len(domains)} domain(s)...{RESET}"
    )

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_query = {
            executor.submit(dns_query, domain, dns_server, record_type): (
                domain,
                dns_server,
                record_type,
            )
            for domain in domains
            for dns_server in dns_servers
            for record_type in RECORD_TYPES
        }

        for future in as_completed(future_to_query):
            try:
                result = future.result()
                results.append(result)
            except Exception as e:
                domain, dns_server, record_type = future_to_query[future]
                print(
                    f"{RED}ERROR{RESET}: {domain:<25} | {dns_server:<15} | {record_type:<10} | Exception: {str(e)}"
                )
            finally:
                completed_queries += 1
                print(
                    f"{CYAN}Progress:{RESET} {completed_queries}/{total_queries} queries completed.",
                    end="\r",
                )

    print()  # Move to the next line after progress
    return results


def print_summary(results: List[DNSQueryResult]) -> None:
    """
    Print a summary table of the DNS query results.
    """
    header = (
        f"{'Domain':<25} | {'DNS Server':<15} | {'Record Type':<10} | {'Status':<7}"
    )
    print(f"\n{CYAN}Summary Table:{RESET}")
    print(header)
    print("-" * len(header))
    for result in results:
        status_color = (
            GREEN
            if result.status == "Success"
            else (YELLOW if result.status == "No answer" else RED)
        )
        print(
            f"{result.domain:<25} | {result.dns_server:<15} | {result.record_type:<10} | {status_color}{result.status:<7}{RESET}"
        )


def main():
    if len(sys.argv) < 2:
        print(f"{RED}Error:{RESET} Usage: ./flushdns <domain1> [domain2 ... domainN]")
        sys.exit(1)

    domains = sys.argv[1:]
    results = run_dns_queries(domains, PUBLIC_DNS_SERVERS)
    print_summary(results)


if __name__ == "__main__":
    main()
