#!/usr/bin/env zsh
#
# Automates routine maintenance on Ubuntu 24.04:
#   1. Upgrade APT, pip and Cargo packages
#   2. Refresh tldr pages
#   3. Remove orphans and old kernels
#   4. Vacuum journal logs
#   5. Update Oh-My-Zsh
#   6. Rotate old /tmp upgrade logs

sudo true
set -euo pipefail
setopt MULTIOS
trap 'error_exit "on line $LINENO"' ERR

## ── Colours ───────────────────────────────────────────────────────────────
typeset -r GREEN="\033[1;32m"
typeset -r RED="\033[1;31m"
typeset -r BLUE="\033[1;34m"
typeset -r RESET="\033[0m"

## ── Logging ───────────────────────────────────────────────────────────────
LOG_FILE="/tmp/log-upgrade-$(date +%Y%m%d%H%M%S).log"
exec > >(tee -a "$LOG_FILE") 2>&1

[[ $EUID -eq 0 ]] && {
    printf "${RED}Please run as a non-root user.${RESET}\n"
    exit 1
}

## ── Helper functions ──────────────────────────────────────────────────────
print_in_color() { printf "%b%s%b\n" "$1" "$2" "$RESET"; }
print_separator() { printf '\n%*s\n' "${COLUMNS:-80}" '' | tr ' ' -; }
error_exit() {
    print_in_color "$RED" "Error: $1"
    printf "See %s\n" "$LOG_FILE" >&2
    exit 1
}
run_cmd() {
    print_in_color "$BLUE" "Running: $*"
    "$@" || error_exit "Command failed: $*"
    print_separator
}
ensure_command() {
    command -v "$1" &>/dev/null || error_exit "Required command '$1' is not installed."
}

# Check required tools are installed
verify_dependencies() {
    print_in_color "$GREEN" "Verifying required commands..."
    local commands=(
        apt-get
        cargo
        code
        deborphan
        git
        jq
        pip3
        purge-old-kernels
        python3
        tldr
    )
    for cmd in "${commands[@]}"; do
        ensure_command "$cmd"
    done
    print_in_color "$GREEN" "All required commands are available."
    print_separator
}

## ── Task functions ────────────────────────────────────────────────────────
# Upgrade APT packages
upgrade_apt_packages() {
    print_in_color "$GREEN" "Upgrading APT packages..."
    run_cmd sudo apt-get update
    run_cmd sudo apt-get install --fix-broken -y
    run_cmd sudo apt-get full-upgrade -y
    run_cmd sudo apt-get autoremove -y
    run_cmd sudo apt-get autoclean
    run_cmd sudo apt-get clean
}

# Upgrade pip itself and all outdated packages
upgrade_pip_packages() {
    export PIP_DISABLE_PIP_VERSION_CHECK=1
    print_in_color "$GREEN" "Upgrading pip packages..."
    run_cmd pip3 install --break-system-packages --upgrade pip --user

    local outdated_json
    if ! outdated_json=$(
        pip3 list --user --outdated --format=json 2>/dev/null
    ); then
        print_in_color "$RED" "Failed to retrieve outdated packages."
        return 1
    fi

    local -a pip_outdated
    while IFS= read -r pkg; do
        pip_outdated+=("$pkg")
    done < <(jq -r '.[].name' <<<"$outdated_json")

    if ((${#pip_outdated[@]})); then
        run_cmd pip3 install --break-system-packages --upgrade --user "${pip_outdated[@]}"
    fi

    run_cmd pip3 cache purge
    print_in_color "$GREEN" "All pip packages are up-to-date."
    print_separator
}

# Upgrade Cargo packages using cargo-update
upgrade_cargo_packages() {
    print_in_color "$GREEN" "Upgrading Cargo packages..."
    run_cmd cargo install-update install-update
    print_in_color "$GREEN" "Cargo packages up-to-date."
    print_separator
}

# Upgrade Visual Studio Code and its extensions
upgrade_vscode() {
    print_in_color "$GREEN" "Updating Visual Studio Code and extensions…"
    run_cmd code --update-extensions
    print_in_color "$GREEN" "Visual Studio Code and extensions updated."
    print_separator
}

# Update local TLDR (tealdeer) cache
update_tldr_pages() {
    print_in_color "$GREEN" "Updating tealdeer..."
    run_cmd tldr --update
    print_in_color "$GREEN" "tealdeer manpages updated."
    print_separator
}

# Remove orphaned packages using deborphan
remove_orphaned_packages() {
    print_in_color "$GREEN" "Removing orphaned packages..."
    local orphans
    orphans=$(deborphan)

    if [[ -n "$orphans" ]]; then
        print_in_color "$BLUE" "Orphaned packages found:\n$orphans"
        run_cmd sudo apt-get purge -y $orphans
    else
        print_in_color "$GREEN" "No orphaned packages to remove."
        print_separator
    fi
}

# Remove old Linux kernels
remove_old_kernels() {
    print_in_color "$GREEN" "Removing old kernels..."
    run_cmd sudo purge-old-kernels -y
}

# Vacuum journal logs (limit to 100MB)
clean_journal_logs() {
    print_in_color "$GREEN" "Cleaning journal logs..."
    run_cmd sudo journalctl --vacuum-size=100M
}

# Upgrade Oh My Zsh framework
upgrade_oh_my_zsh() {
    print_in_color "$GREEN" "Updating Oh My Zsh…"
    run_cmd "$HOME/.oh-my-zsh/tools/upgrade.sh"
}

# Remove old upgrade logs from /tmp
clean_old_logs() {
    print_in_color "$GREEN" "Cleaning up old log files..."
    run_cmd sudo find /tmp -type f -name 'log-upgrade-*.log' -mtime +7 -delete
    print_in_color "$GREEN" "Old log files cleaned up."
    print_separator
}

## ── Execution order ───────────────────────────────────────────────────────
run_steps=(
    upgrade_apt_packages
    upgrade_pip_packages
    upgrade_cargo_packages
    upgrade_vscode
    update_tldr_pages
    remove_orphaned_packages
    remove_old_kernels
    clean_journal_logs
    upgrade_oh_my_zsh
)

main() {
    verify_dependencies
    for step in "${run_steps[@]}"; do "$step"; done
    print_in_color "$GREEN" "System update and cleanup complete!"
    printf "Log file located at: %s\n" "$LOG_FILE"
    clean_old_logs
}
main
